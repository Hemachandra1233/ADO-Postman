{
	"info": {
		"_postman_id": "c0ac57e3-b66b-4a4e-8ec6-34146473374a",
		"name": "sys-dynamics365",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23031964"
	},
	"item": [
		{
			"name": "start-up",
			"item": [
				{
					"name": "oAuthToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json()",
									"pm.collectionVariables.set(\"access_token\", json.access_token)",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Token type is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token type should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Access token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Refresh token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{dynamicsUsername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{dynamicsPassword}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{dynamicsClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{dynamicsResource}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{dynamicsClientSecret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/741bf7de-e2e5-46df-8d67-82607df9deaa/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"741bf7de-e2e5-46df-8d67-82607df9deaa",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET dynamics365/contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const value = pm.response.json().value[0];\r",
									"pm.collectionVariables.set('getContactContactId', value.contactid)\r",
									"pm.collectionVariables.set(\"getContactUsfId\", value.usf_usfid)\r",
									"pm.collectionVariables.set(\"getContactFirstName\", value.firstname)\r",
									"pm.collectionVariables.set(\"getContactLastName\", value.lastname)\r",
									"pm.collectionVariables.set(\"getContactBirthDate\", value.birthdate)\r",
									"pm.collectionVariables.set(\"getContactEmailAddress1\", value.emailaddress1)\r",
									"pm.collectionVariables.set(\"getContactEmailAddress2\", value.emailaddress2)\r",
									"pm.collectionVariables.set(\"getContactMobilePhone\", value.mobilephone)",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dynamicsResource}}/api/data/v9.1/contacts?$top=1&$filter=usf_usfid ne null and mobilephone ne null and emailaddress2 ne null and emailaddress1 ne null",
							"host": [
								"{{dynamicsResource}}"
							],
							"path": [
								"api",
								"data",
								"v9.1",
								"contacts"
							],
							"query": [
								{
									"key": "$top",
									"value": "1"
								},
								{
									"key": "$filter",
									"value": "usf_usfid ne null and mobilephone ne null and emailaddress2 ne null and emailaddress1 ne null"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET dynamics365/usf_contactattributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const value = pm.response.json().value[0];\r",
									"pm.collectionVariables.set('getContactAttributesContactId', value._usf_studentid_value)",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData[\"@odata.context\"]).to.exist;",
									"    pm.expect(responseData.value).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Value field is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.value).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"The _usf_studentid_value field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.value).to.be.an('array');",
									"    responseData.value.forEach(function(item){",
									"        pm.expect(item._usf_studentid_value).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dynamicsResource}}/api/data/v9.1/usf_contactattributes?$top=20&$select=usf_attributecode,_usf_studentid_value",
							"host": [
								"{{dynamicsResource}}"
							],
							"path": [
								"api",
								"data",
								"v9.1",
								"usf_contactattributes"
							],
							"query": [
								{
									"key": "$top",
									"value": "20"
								},
								{
									"key": "$select",
									"value": "usf_attributecode,_usf_studentid_value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET dynamics365/opportunities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const value = pm.response.json().value[0];\r",
									"pm.collectionVariables.set('getOpportunitiesContactId', value._parentcontactid_value)",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the presence of the 'value' field in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.value).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'value' field is an array and is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.value).to.be.an('array').and.to.have.lengthOf.above(0, \"Array should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dynamicsResource}}/api/data/v9.1/opportunities?$filter=usf_applicationnumber ne null&$top=10",
							"host": [
								"{{dynamicsResource}}"
							],
							"path": [
								"api",
								"data",
								"v9.1",
								"opportunities"
							],
							"query": [
								{
									"key": "$filter",
									"value": "usf_applicationnumber ne null"
								},
								{
									"key": "$top",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET dynamics365/usf_hubspots",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const value = pm.response.json().value[0];",
									"pm.collectionVariables.set('getHubspotSyncContactId', value._usf_contact_value);",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('@odata.context');",
									"  pm.expect(responseData).to.have.property('value');",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence and number of elements in the 'value' array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.value).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.value).to.have.lengthOf(2);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'usf_hubspotemailoptout' field is a boolean\", function () {",
									"  const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.value).to.be.an('array');",
									"    ",
									"    responseData.value.forEach(function (item) {",
									"        pm.expect(item.usf_hubspotemailoptout).to.be.a('boolean');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'usf_hubspotmarketingcontactstatus' field is a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.value).to.be.an('array');",
									"    ",
									"    responseData.value.forEach(function (item) {",
									"        pm.expect(item.usf_hubspotmarketingcontactstatus).to.be.a('boolean');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dynamicsResource}}/api/data/v9.1/usf_hubspots?$top=2&$filter=_usf_contact_value ne null",
							"host": [
								"{{dynamicsResource}}"
							],
							"path": [
								"api",
								"data",
								"v9.1",
								"usf_hubspots"
							],
							"query": [
								{
									"key": "$top",
									"value": "2"
								},
								{
									"key": "$filter",
									"value": "_usf_contact_value ne null"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET dynamics365/msevtmgt_Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();",
									"",
									"const value = json.value[0];",
									"",
									"pm.collectionVariables.set('getMsEvtMgtEventsEventId', value.msevtmgt_eventid)",
									"",
									"pm.collectionVariables.set('getMsEvtMgtEventsCrmEventid', value.usf_crmeventid)",
									"",
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Verify that the \\'value\\' array is present and contains at least one element', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.value).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"})",
									"",
									"pm.test('Verify that the \\'usf_topicathleticsbasketball\\' field is a boolean', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.value).to.be.an('array');",
									"    responseData.value.forEach(function (item) {",
									"        pm.expect(item.usf_topicathleticsbasketball).to.be.a('boolean');",
									"    });",
									"})",
									"",
									"pm.test(\"Verify that the 'msevtmgt_eventstartdate' is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.value).to.be.an('array');",
									"    responseData.value.forEach(function (item) {",
									"        pm.expect(item.msevtmgt_eventstartdate).to.be.a('string').and.to.match(/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})Z$/);",
									"     });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dynamicsResource}}/api/data/v9.1/msevtmgt_events?$top=2",
							"host": [
								"{{dynamicsResource}}"
							],
							"path": [
								"api",
								"data",
								"v9.1",
								"msevtmgt_events"
							],
							"query": [
								{
									"key": "$top",
									"value": "2"
								},
								{
									"key": "$filter",
									"value": "_usf_contact_value ne null",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET dynamics365/usf_recruiterterritories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const value = pm.response.json().value[0];\r",
									"pm.collectionVariables.set('getUsfRecruiterTerritoryId', value.usf_recruiterterritoryid)",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'value' array is present in the response and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.value).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Verify that 'usf_recruiterterritoryid' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.value).to.be.an('array');",
									"    responseData.value.forEach(function(item) {",
									"        pm.expect(item.usf_recruiterterritoryid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"'usf_recruiterterritoryid' should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'usf_zipcodehigh' is null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.value).to.be.an('array');",
									"    responseData.value.forEach(function (item) {",
									"        pm.expect(item.usf_zipcodehigh).to.be.null;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dynamicsResource}}/api/data/v9.1/usf_recruiterterritories?$top=2&$select=usf_recruiterterritoryid, _ownerid_value, _usf_countryid_value, _usf_stateid_value, usf_county, usf_zipcodehigh, _usf_highschoolid_value",
							"host": [
								"{{dynamicsResource}}"
							],
							"path": [
								"api",
								"data",
								"v9.1",
								"usf_recruiterterritories"
							],
							"query": [
								{
									"key": "$top",
									"value": "2"
								},
								{
									"key": "$filter",
									"value": "_usf_contact_value ne null",
									"disabled": true
								},
								{
									"key": "$select",
									"value": "usf_recruiterterritoryid, _ownerid_value, _usf_countryid_value, _usf_stateid_value, usf_county, usf_zipcodehigh, _usf_highschoolid_value"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "vendorProspects",
			"item": [
				{
					"name": "POST /vendorProspects",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contact\": {\r\n    \"source\": \"Cappex\",\r\n    \"firstName\": \"EAI-Test\",\r\n    \"middleName\": \"EAI-Testing\",\r\n    \"lastName\": \"EAI-Testerson\",\r\n    \"contactType\": \"Student\",\r\n    \"email1\": \"joseph_smith-TEST@comcast.net\",\r\n    \"mobilePhone\": \"6789876543\",\r\n    \"telephone2\": \"9995554321\",\r\n    \"birthDate\": \"2005-04-18\",\r\n    \"gender\": \"Female\",\r\n    \"hispanicOrLatino\": \"Yes\",\r\n    \"nativeHawaiianPacificIslander\": \"Yes\",\r\n    \"asian\": \"Yes\",\r\n    \"sourceDate\": \"2023-01-30\",\r\n    \"address1-city\": \"Miami\",\r\n    \"address1-stateCode\": \"FL\",\r\n    \"address1-street1\": \"9520 SW 171st Ct\",\r\n    \"address1-street2\": \"Unit 1\",\r\n    \"address1-street3\": \"Heritage Greens Apts\",\r\n    \"address1-zipCode\": \"33161\",\r\n    \"address1-county\": \"Miami-Dade\",\r\n    \"address1-country\": \"United States\",\r\n    \"address2-city\": \"Miami\",\r\n    \"address2-stateCode\": \"FL\",\r\n    \"address2-street1\": \"9520 SW 171st Ct\",\r\n    \"address2-street2\": \"Unit 1\",\r\n    \"address2-street3\": \"Heritage Greens Apts\",\r\n    \"address2-zipCode\": \"33161\",\r\n    \"address2-county\": \"Miami-Dade\",\r\n    \"address2-country\": \"United States\"\r\n  },\r\n  \"opportunity\": {\r\n    \"source\": \"Cappex\",\r\n    \"stage\": \"Prospect\",\r\n    \"opportunityType\": \"Undergraduate\",\r\n    \"application\": {\r\n      \"studentType\": \"Freshman\",\r\n      \"entryTerm\": \"202308\",\r\n      \"nationOfCitizenship-country\": \"United States\"\r\n    }\r\n  },\r\n  \"schoolHistory\": {\r\n    \"graduationDate\": \"2023-06-01\",\r\n    \"highSchoolName\": \"Miami Country Day School\",\r\n    \"GPA\": 3.9,\r\n    \"highSchoolCode\": \"101032\",\r\n    \"source\": \"Cappex\"\r\n  },\r\n  \"interest\": [\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Business\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Music\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Chemistry\",\r\n      \"type\": \"Academic\"\r\n    }\r\n  ],\r\n  \"testScores\": [\r\n    {\r\n      \"code\": \"EAC1\",\r\n      \"score\": \"69\",\r\n      \"description\": \"ACT Best English Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC2\",\r\n      \"score\": \"54\",\r\n      \"description\": \"ACT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC3\",\r\n      \"score\": \"34\",\r\n      \"description\": \"ACT Best Reading Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC4\",\r\n      \"score\": \"24\",\r\n      \"description\": \"ACT Best Science Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC5\",\r\n      \"score\": \"29\",\r\n      \"description\": \"ACT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST11\",\r\n      \"score\": \"764\",\r\n      \"description\": \"SAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST12\",\r\n      \"score\": \"784\",\r\n      \"description\": \"SAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"SATN\",\r\n      \"score\": \"1554\",\r\n      \"description\": \"SAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PEAC5\",\r\n      \"score\": \"27\",\r\n      \"description\": \"PreACT Best Score Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST11\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST12\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PSATN\",\r\n      \"score\": \"1514\",\r\n      \"description\": \"PSAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ],\r\n  \"studentAttributes\": [\r\n    {\r\n      \"attribute\": \"National Merit Semi-Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"National Hispanic Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"Pre-College Invite\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/vendorProspects",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"vendorProspects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /vendorProspects - bad address1-zipCode - expect 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contact\": {\r\n    \"source\": \"Cappex\",\r\n    \"firstName\": \"EAI-Test\",\r\n    \"middleName\": \"EAI-Testing\",\r\n    \"lastName\": \"EAI-Testerson\",\r\n    \"contactType\": \"Student\",\r\n    \"email1\": \"joseph_smith-TEST@comcast.net\",\r\n    \"mobilePhone\": \"6789876543\",\r\n    \"telephone2\": \"9995554321\",\r\n    \"birthDate\": \"2005-04-18\",\r\n    \"gender\": \"Female\",\r\n    \"hispanicOrLatino\": \"Yes\",\r\n    \"nativeHawaiianPacificIslander\": \"Yes\",\r\n    \"asian\": \"Yes\",\r\n    \"sourceDate\": \"2023-01-30\",\r\n    \"address1-city\": \"Miami\",\r\n    \"address1-stateCode\": \"FL\",\r\n    \"address1-street1\": \"9520 SW 171st Ct\",\r\n    \"address1-street2\": \"Unit 1\",\r\n    \"address1-street3\": \"Heritage Greens Apts\",\r\n    \"address1-zipCode\": \"BadZipCode\",\r\n    \"address1-county\": \"Miami-Dade\",\r\n    \"address1-country\": \"United States\",\r\n    \"address2-city\": \"Miami\",\r\n    \"address2-stateCode\": \"FL\",\r\n    \"address2-street1\": \"9520 SW 171st Ct\",\r\n    \"address2-street2\": \"Unit 1\",\r\n    \"address2-street3\": \"Heritage Greens Apts\",\r\n    \"address2-zipCode\": \"33161\",\r\n    \"address2-county\": \"Miami-Dade\",\r\n    \"address2-country\": \"United States\"\r\n  },\r\n  \"opportunity\": {\r\n    \"source\": \"Cappex\",\r\n    \"stage\": \"Prospect\",\r\n    \"opportunityType\": \"Undergraduate\",\r\n    \"application\": {\r\n      \"studentType\": \"Freshman\",\r\n      \"entryTerm\": \"202308\",\r\n      \"nationOfCitizenship-country\": \"United States\"\r\n    }\r\n  },\r\n  \"schoolHistory\": {\r\n    \"graduationDate\": \"2023-06-01\",\r\n    \"highSchoolName\": \"Miami Country Day School\",\r\n    \"GPA\": 3.9,\r\n    \"highSchoolCode\": \"101032\",\r\n    \"source\": \"Cappex\"\r\n  },\r\n  \"interest\": [\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Business\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Music\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Chemistry\",\r\n      \"type\": \"Academic\"\r\n    }\r\n  ],\r\n  \"testScores\": [\r\n    {\r\n      \"code\": \"EAC1\",\r\n      \"score\": \"69\",\r\n      \"description\": \"ACT Best English Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC2\",\r\n      \"score\": \"54\",\r\n      \"description\": \"ACT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC3\",\r\n      \"score\": \"34\",\r\n      \"description\": \"ACT Best Reading Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC4\",\r\n      \"score\": \"24\",\r\n      \"description\": \"ACT Best Science Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC5\",\r\n      \"score\": \"29\",\r\n      \"description\": \"ACT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST11\",\r\n      \"score\": \"764\",\r\n      \"description\": \"SAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST12\",\r\n      \"score\": \"784\",\r\n      \"description\": \"SAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"SATN\",\r\n      \"score\": \"1554\",\r\n      \"description\": \"SAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PEAC5\",\r\n      \"score\": \"27\",\r\n      \"description\": \"PreACT Best Score Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST11\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST12\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PSATN\",\r\n      \"score\": \"1514\",\r\n      \"description\": \"PSAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ],\r\n  \"studentAttributes\": [\r\n    {\r\n      \"attribute\": \"National Merit Semi-Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"National Hispanic Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"Pre-College Invite\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/vendorProspects",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"vendorProspects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /vendorProspects - bad address2-zipCode - expect 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contact\": {\r\n    \"source\": \"Cappex\",\r\n    \"firstName\": \"EAI-Test\",\r\n    \"middleName\": \"EAI-Testing\",\r\n    \"lastName\": \"EAI-Testerson\",\r\n    \"contactType\": \"Student\",\r\n    \"email1\": \"joseph_smith-TEST@comcast.net\",\r\n    \"mobilePhone\": \"6789876543\",\r\n    \"telephone2\": \"9995554321\",\r\n    \"birthDate\": \"2005-04-18\",\r\n    \"gender\": \"Female\",\r\n    \"hispanicOrLatino\": \"Yes\",\r\n    \"nativeHawaiianPacificIslander\": \"Yes\",\r\n    \"asian\": \"Yes\",\r\n    \"sourceDate\": \"2023-01-30\",\r\n    \"address1-city\": \"Miami\",\r\n    \"address1-stateCode\": \"FL\",\r\n    \"address1-street1\": \"9520 SW 171st Ct\",\r\n    \"address1-street2\": \"Unit 1\",\r\n    \"address1-street3\": \"Heritage Greens Apts\",\r\n    \"address1-zipCode\": \"33161\",\r\n    \"address1-county\": \"Miami-Dade\",\r\n    \"address1-country\": \"United States\",\r\n    \"address2-city\": \"Miami\",\r\n    \"address2-stateCode\": \"FL\",\r\n    \"address2-street1\": \"9520 SW 171st Ct\",\r\n    \"address2-street2\": \"Unit 1\",\r\n    \"address2-street3\": \"Heritage Greens Apts\",\r\n    \"address2-zipCode\": \"BadZipCode\",\r\n    \"address2-county\": \"Miami-Dade\",\r\n    \"address2-country\": \"United States\"\r\n  },\r\n  \"opportunity\": {\r\n    \"source\": \"Cappex\",\r\n    \"stage\": \"Prospect\",\r\n    \"opportunityType\": \"Undergraduate\",\r\n    \"application\": {\r\n      \"studentType\": \"Freshman\",\r\n      \"entryTerm\": \"202308\",\r\n      \"nationOfCitizenship-country\": \"United States\"\r\n    }\r\n  },\r\n  \"schoolHistory\": {\r\n    \"graduationDate\": \"2023-06-01\",\r\n    \"highSchoolName\": \"Miami Country Day School\",\r\n    \"GPA\": 3.9,\r\n    \"highSchoolCode\": \"101032\",\r\n    \"source\": \"Cappex\"\r\n  },\r\n  \"interest\": [\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Business\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Music\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Chemistry\",\r\n      \"type\": \"Academic\"\r\n    }\r\n  ],\r\n  \"testScores\": [\r\n    {\r\n      \"code\": \"EAC1\",\r\n      \"score\": \"69\",\r\n      \"description\": \"ACT Best English Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC2\",\r\n      \"score\": \"54\",\r\n      \"description\": \"ACT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC3\",\r\n      \"score\": \"34\",\r\n      \"description\": \"ACT Best Reading Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC4\",\r\n      \"score\": \"24\",\r\n      \"description\": \"ACT Best Science Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC5\",\r\n      \"score\": \"29\",\r\n      \"description\": \"ACT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST11\",\r\n      \"score\": \"764\",\r\n      \"description\": \"SAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST12\",\r\n      \"score\": \"784\",\r\n      \"description\": \"SAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"SATN\",\r\n      \"score\": \"1554\",\r\n      \"description\": \"SAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PEAC5\",\r\n      \"score\": \"27\",\r\n      \"description\": \"PreACT Best Score Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST11\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST12\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PSATN\",\r\n      \"score\": \"1514\",\r\n      \"description\": \"PSAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ],\r\n  \"studentAttributes\": [\r\n    {\r\n      \"attribute\": \"National Merit Semi-Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"National Hispanic Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"Pre-College Invite\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/vendorProspects",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"vendorProspects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /vendorProspects - no address1-zipCode - expect 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contact\": {\r\n    \"source\": \"Cappex\",\r\n    \"firstName\": \"EAI-Test\",\r\n    \"middleName\": \"EAI-Testing\",\r\n    \"lastName\": \"EAI-Testerson\",\r\n    \"contactType\": \"Student\",\r\n    \"email1\": \"joseph_smith-TEST@comcast.net\",\r\n    \"mobilePhone\": \"6789876543\",\r\n    \"telephone2\": \"9995554321\",\r\n    \"birthDate\": \"2005-04-18\",\r\n    \"gender\": \"Female\",\r\n    \"hispanicOrLatino\": \"Yes\",\r\n    \"nativeHawaiianPacificIslander\": \"Yes\",\r\n    \"asian\": \"Yes\",\r\n    \"sourceDate\": \"2023-01-30\",\r\n    \"address1-city\": \"Miami\",\r\n    \"address1-stateCode\": \"FL\",\r\n    \"address1-street1\": \"9520 SW 171st Ct\",\r\n    \"address1-street2\": \"Unit 1\",\r\n    \"address1-street3\": \"Heritage Greens Apts\",\r\n    \"address1-county\": \"Miami-Dade\",\r\n    \"address1-country\": \"United States\",\r\n    \"address2-city\": \"Miami\",\r\n    \"address2-stateCode\": \"FL\",\r\n    \"address2-street1\": \"9520 SW 171st Ct\",\r\n    \"address2-street2\": \"Unit 1\",\r\n    \"address2-street3\": \"Heritage Greens Apts\",\r\n    \"address2-zipCode\": \"33161\",\r\n    \"address2-county\": \"Miami-Dade\",\r\n    \"address2-country\": \"United States\"\r\n  },\r\n  \"opportunity\": {\r\n    \"source\": \"Cappex\",\r\n    \"stage\": \"Prospect\",\r\n    \"opportunityType\": \"Undergraduate\",\r\n    \"application\": {\r\n      \"studentType\": \"Freshman\",\r\n      \"entryTerm\": \"202308\",\r\n      \"nationOfCitizenship-country\": \"United States\"\r\n    }\r\n  },\r\n  \"schoolHistory\": {\r\n    \"graduationDate\": \"2023-06-01\",\r\n    \"highSchoolName\": \"Miami Country Day School\",\r\n    \"GPA\": 3.9,\r\n    \"highSchoolCode\": \"101032\",\r\n    \"source\": \"Cappex\"\r\n  },\r\n  \"interest\": [\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Business\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Music\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Chemistry\",\r\n      \"type\": \"Academic\"\r\n    }\r\n  ],\r\n  \"testScores\": [\r\n    {\r\n      \"code\": \"EAC1\",\r\n      \"score\": \"69\",\r\n      \"description\": \"ACT Best English Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC2\",\r\n      \"score\": \"54\",\r\n      \"description\": \"ACT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC3\",\r\n      \"score\": \"34\",\r\n      \"description\": \"ACT Best Reading Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC4\",\r\n      \"score\": \"24\",\r\n      \"description\": \"ACT Best Science Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC5\",\r\n      \"score\": \"29\",\r\n      \"description\": \"ACT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST11\",\r\n      \"score\": \"764\",\r\n      \"description\": \"SAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST12\",\r\n      \"score\": \"784\",\r\n      \"description\": \"SAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"SATN\",\r\n      \"score\": \"1554\",\r\n      \"description\": \"SAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PEAC5\",\r\n      \"score\": \"27\",\r\n      \"description\": \"PreACT Best Score Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST11\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST12\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PSATN\",\r\n      \"score\": \"1514\",\r\n      \"description\": \"PSAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ],\r\n  \"studentAttributes\": [\r\n    {\r\n      \"attribute\": \"National Merit Semi-Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"National Hispanic Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"Pre-College Invite\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/vendorProspects",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"vendorProspects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /vendorProspects - null address1-zipCode - expect 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contact\": {\r\n    \"source\": \"Cappex\",\r\n    \"firstName\": \"EAI-Test\",\r\n    \"middleName\": \"EAI-Testing\",\r\n    \"lastName\": \"EAI-Testerson\",\r\n    \"contactType\": \"Student\",\r\n    \"email1\": \"joseph_smith-TEST@comcast.net\",\r\n    \"mobilePhone\": \"6789876543\",\r\n    \"telephone2\": \"9995554321\",\r\n    \"birthDate\": \"2005-04-18\",\r\n    \"gender\": \"Female\",\r\n    \"hispanicOrLatino\": \"Yes\",\r\n    \"nativeHawaiianPacificIslander\": \"Yes\",\r\n    \"asian\": \"Yes\",\r\n    \"sourceDate\": \"2023-01-30\",\r\n    \"address1-city\": \"Miami\",\r\n    \"address1-stateCode\": \"FL\",\r\n    \"address1-street1\": \"9520 SW 171st Ct\",\r\n    \"address1-street2\": \"Unit 1\",\r\n    \"address1-street3\": \"Heritage Greens Apts\",\r\n    \"address1-county\": \"Miami-Dade\",\r\n    \"address1-country\": \"United States\",\r\n    \"address1-zipCode\": null,\r\n    \"address2-city\": \"Miami\",\r\n    \"address2-stateCode\": \"FL\",\r\n    \"address2-street1\": \"9520 SW 171st Ct\",\r\n    \"address2-street2\": \"Unit 1\",\r\n    \"address2-street3\": \"Heritage Greens Apts\",\r\n    \"address2-zipCode\": \"33161\",\r\n    \"address2-county\": \"Miami-Dade\",\r\n    \"address2-country\": \"United States\"\r\n  },\r\n  \"opportunity\": {\r\n    \"source\": \"Cappex\",\r\n    \"stage\": \"Prospect\",\r\n    \"opportunityType\": \"Undergraduate\",\r\n    \"application\": {\r\n      \"studentType\": \"Freshman\",\r\n      \"entryTerm\": \"202308\",\r\n      \"nationOfCitizenship-country\": \"United States\"\r\n    }\r\n  },\r\n  \"schoolHistory\": {\r\n    \"graduationDate\": \"2023-06-01\",\r\n    \"highSchoolName\": \"Miami Country Day School\",\r\n    \"GPA\": 3.9,\r\n    \"highSchoolCode\": \"101032\",\r\n    \"source\": \"Cappex\"\r\n  },\r\n  \"interest\": [\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Business\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Music\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Chemistry\",\r\n      \"type\": \"Academic\"\r\n    }\r\n  ],\r\n  \"testScores\": [\r\n    {\r\n      \"code\": \"EAC1\",\r\n      \"score\": \"69\",\r\n      \"description\": \"ACT Best English Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC2\",\r\n      \"score\": \"54\",\r\n      \"description\": \"ACT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC3\",\r\n      \"score\": \"34\",\r\n      \"description\": \"ACT Best Reading Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC4\",\r\n      \"score\": \"24\",\r\n      \"description\": \"ACT Best Science Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC5\",\r\n      \"score\": \"29\",\r\n      \"description\": \"ACT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST11\",\r\n      \"score\": \"764\",\r\n      \"description\": \"SAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST12\",\r\n      \"score\": \"784\",\r\n      \"description\": \"SAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"SATN\",\r\n      \"score\": \"1554\",\r\n      \"description\": \"SAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PEAC5\",\r\n      \"score\": \"27\",\r\n      \"description\": \"PreACT Best Score Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST11\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST12\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PSATN\",\r\n      \"score\": \"1514\",\r\n      \"description\": \"PSAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ],\r\n  \"studentAttributes\": [\r\n    {\r\n      \"attribute\": \"National Merit Semi-Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"National Hispanic Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"Pre-College Invite\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/vendorProspects",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"vendorProspects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /vendorProspects - no address2-zipCode - expect 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contact\": {\r\n    \"source\": \"Cappex\",\r\n    \"firstName\": \"EAI-Test\",\r\n    \"middleName\": \"EAI-Testing\",\r\n    \"lastName\": \"EAI-Testerson\",\r\n    \"contactType\": \"Student\",\r\n    \"email1\": \"joseph_smith-TEST@comcast.net\",\r\n    \"mobilePhone\": \"6789876543\",\r\n    \"telephone2\": \"9995554321\",\r\n    \"birthDate\": \"2005-04-18\",\r\n    \"gender\": \"Female\",\r\n    \"hispanicOrLatino\": \"Yes\",\r\n    \"nativeHawaiianPacificIslander\": \"Yes\",\r\n    \"asian\": \"Yes\",\r\n    \"sourceDate\": \"2023-01-30\",\r\n    \"address1-city\": \"Miami\",\r\n    \"address1-stateCode\": \"FL\",\r\n    \"address1-street1\": \"9520 SW 171st Ct\",\r\n    \"address1-street2\": \"Unit 1\",\r\n    \"address1-street3\": \"Heritage Greens Apts\",\r\n    \"address1-county\": \"Miami-Dade\",\r\n    \"address1-country\": \"United States\",\r\n    \"address1-zipCode\": \"33161\",\r\n    \"address2-city\": \"Miami\",\r\n    \"address2-stateCode\": \"FL\",\r\n    \"address2-street1\": \"9520 SW 171st Ct\",\r\n    \"address2-street2\": \"Unit 1\",\r\n    \"address2-street3\": \"Heritage Greens Apts\",\r\n    \"address2-county\": \"Miami-Dade\",\r\n    \"address2-country\": \"United States\"\r\n  },\r\n  \"opportunity\": {\r\n    \"source\": \"Cappex\",\r\n    \"stage\": \"Prospect\",\r\n    \"opportunityType\": \"Undergraduate\",\r\n    \"application\": {\r\n      \"studentType\": \"Freshman\",\r\n      \"entryTerm\": \"202308\",\r\n      \"nationOfCitizenship-country\": \"United States\"\r\n    }\r\n  },\r\n  \"schoolHistory\": {\r\n    \"graduationDate\": \"2023-06-01\",\r\n    \"highSchoolName\": \"Miami Country Day School\",\r\n    \"GPA\": 3.9,\r\n    \"highSchoolCode\": \"101032\",\r\n    \"source\": \"Cappex\"\r\n  },\r\n  \"interest\": [\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Business\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Music\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Chemistry\",\r\n      \"type\": \"Academic\"\r\n    }\r\n  ],\r\n  \"testScores\": [\r\n    {\r\n      \"code\": \"EAC1\",\r\n      \"score\": \"69\",\r\n      \"description\": \"ACT Best English Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC2\",\r\n      \"score\": \"54\",\r\n      \"description\": \"ACT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC3\",\r\n      \"score\": \"34\",\r\n      \"description\": \"ACT Best Reading Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC4\",\r\n      \"score\": \"24\",\r\n      \"description\": \"ACT Best Science Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC5\",\r\n      \"score\": \"29\",\r\n      \"description\": \"ACT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST11\",\r\n      \"score\": \"764\",\r\n      \"description\": \"SAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST12\",\r\n      \"score\": \"784\",\r\n      \"description\": \"SAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"SATN\",\r\n      \"score\": \"1554\",\r\n      \"description\": \"SAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PEAC5\",\r\n      \"score\": \"27\",\r\n      \"description\": \"PreACT Best Score Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST11\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST12\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PSATN\",\r\n      \"score\": \"1514\",\r\n      \"description\": \"PSAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ],\r\n  \"studentAttributes\": [\r\n    {\r\n      \"attribute\": \"National Merit Semi-Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"National Hispanic Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"Pre-College Invite\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/vendorProspects",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"vendorProspects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /vendorProspects - null address2-zipCode - expect 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contact\": {\r\n    \"source\": \"Cappex\",\r\n    \"firstName\": \"EAI-Test\",\r\n    \"middleName\": \"EAI-Testing\",\r\n    \"lastName\": \"EAI-Testerson\",\r\n    \"contactType\": \"Student\",\r\n    \"email1\": \"joseph_smith-TEST@comcast.net\",\r\n    \"mobilePhone\": \"6789876543\",\r\n    \"telephone2\": \"9995554321\",\r\n    \"birthDate\": \"2005-04-18\",\r\n    \"gender\": \"Female\",\r\n    \"hispanicOrLatino\": \"Yes\",\r\n    \"nativeHawaiianPacificIslander\": \"Yes\",\r\n    \"asian\": \"Yes\",\r\n    \"sourceDate\": \"2023-01-30\",\r\n    \"address1-city\": \"Miami\",\r\n    \"address1-stateCode\": \"FL\",\r\n    \"address1-street1\": \"9520 SW 171st Ct\",\r\n    \"address1-street2\": \"Unit 1\",\r\n    \"address1-street3\": \"Heritage Greens Apts\",\r\n    \"address1-county\": \"Miami-Dade\",\r\n    \"address1-country\": \"United States\",\r\n    \"address1-zipCode\": \"33161\",\r\n    \"address2-city\": \"Miami\",\r\n    \"address2-stateCode\": \"FL\",\r\n    \"address2-street1\": \"9520 SW 171st Ct\",\r\n    \"address2-street2\": \"Unit 1\",\r\n    \"address2-street3\": \"Heritage Greens Apts\",\r\n    \"address2-zipCode\": null,\r\n    \"address2-county\": \"Miami-Dade\",\r\n    \"address2-country\": \"United States\"\r\n  },\r\n  \"opportunity\": {\r\n    \"source\": \"Cappex\",\r\n    \"stage\": \"Prospect\",\r\n    \"opportunityType\": \"Undergraduate\",\r\n    \"application\": {\r\n      \"studentType\": \"Freshman\",\r\n      \"entryTerm\": \"202308\",\r\n      \"nationOfCitizenship-country\": \"United States\"\r\n    }\r\n  },\r\n  \"schoolHistory\": {\r\n    \"graduationDate\": \"2023-06-01\",\r\n    \"highSchoolName\": \"Miami Country Day School\",\r\n    \"GPA\": 3.9,\r\n    \"highSchoolCode\": \"101032\",\r\n    \"source\": \"Cappex\"\r\n  },\r\n  \"interest\": [\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Business\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Music\",\r\n      \"type\": \"Academic\"\r\n    },\r\n    {\r\n      \"source\": \"Cappex\",\r\n      \"interest\": \"Chemistry\",\r\n      \"type\": \"Academic\"\r\n    }\r\n  ],\r\n  \"testScores\": [\r\n    {\r\n      \"code\": \"EAC1\",\r\n      \"score\": \"69\",\r\n      \"description\": \"ACT Best English Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC2\",\r\n      \"score\": \"54\",\r\n      \"description\": \"ACT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC3\",\r\n      \"score\": \"34\",\r\n      \"description\": \"ACT Best Reading Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC4\",\r\n      \"score\": \"24\",\r\n      \"description\": \"ACT Best Science Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"EAC5\",\r\n      \"score\": \"29\",\r\n      \"description\": \"ACT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST11\",\r\n      \"score\": \"764\",\r\n      \"description\": \"SAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"ST12\",\r\n      \"score\": \"784\",\r\n      \"description\": \"SAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"SATN\",\r\n      \"score\": \"1554\",\r\n      \"description\": \"SAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PEAC5\",\r\n      \"score\": \"27\",\r\n      \"description\": \"PreACT Best Score Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST11\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best EWR Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PST12\",\r\n      \"score\": \"754\",\r\n      \"description\": \"PSAT Best Math Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"code\": \"PSATN\",\r\n      \"score\": \"1514\",\r\n      \"description\": \"PSAT Best Total Unofficial\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ],\r\n  \"studentAttributes\": [\r\n    {\r\n      \"attribute\": \"National Merit Semi-Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"National Hispanic Finalist\",\r\n      \"source\": \"Cappex\"\r\n    },\r\n    {\r\n      \"attribute\": \"Pre-College Invite\",\r\n      \"source\": \"Cappex\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/vendorProspects",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"vendorProspects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "lookups/events",
			"item": [
				{
					"name": "GET lookups/events?orgEventId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"eventId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/lookups/events?orgEventId={{getMsEvtMgtEventsCrmEventid}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"lookups",
								"events"
							],
							"query": [
								{
									"key": "orgEventId",
									"value": "{{getMsEvtMgtEventsCrmEventid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET lookups/events?orgEventId - expect 500 no event associated with org id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/lookups/events?orgEventId=DYN",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"lookups",
								"events"
							],
							"query": [
								{
									"key": "orgEventId",
									"value": "DYN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET lookups/events - expect 400 missing orgEventId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"orgEventId\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/lookups/events",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"lookups",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET lookups/events?orgEventId - expect 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/lookups/events?orgEventId=DYN-000299",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"lookups",
								"events"
							],
							"query": [
								{
									"key": "orgEventId",
									"value": "DYN-000299"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET lookups/events?orgEventId - expect 40X missing client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/lookups/events?orgEventId=DYN-000299",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"lookups",
								"events"
							],
							"query": [
								{
									"key": "orgEventId",
									"value": "DYN-000299"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/recruiterAssignmentRules/notify",
			"item": [
				{
					"name": "POST /v2/recruiterAssignmentRules/notify",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"recruiterAssignmentRuleId\": \"{{getUsfRecruiterTerritoryId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/recruiterAssignmentRules/notify",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"recruiterAssignmentRules",
								"notify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/academic/terms",
			"item": [
				{
					"name": "GET v2/academic/terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"termId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"termCode\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"term\": {\r",
									"                        \"type\": [ \"string\", \"null\" ]\r",
									"                    },\r",
									"                    \"startDate\": {\r",
									"                        \"type\": [ \"string\", \"null\" ]\r",
									"                    },\r",
									"                    \"endDate\": {\r",
									"                        \"type\": [ \"string\", \"null\" ]\r",
									"                    },\r",
									"                    \"financialAidYearCode\": {\r",
									"                        \"type\": [ \"string\", \"null\" ]\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('termCode', json.data[0].termCode)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET v2/academic/terms?termCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"All records have the same term code\", function() {\r",
									"    const termCode = pm.request.url.query.get('termCode')\r",
									"    let err = 0;\r",
									"    for (let i = 0; i < json.data.length; i++) {\r",
									"        const record = json.data[i]\r",
									"        if (record.termCode !== termCode) {\r",
									"            console.log(`${record.termCode} and ${termCode}`)\r",
									"            err++;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(err).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms?termCode={{termCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							],
							"query": [
								{
									"key": "termCode",
									"value": "{{termCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET v2/academic/terms?termCode - expect empty data array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    pm.expect(json.data.length).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms?termCode=189001",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							],
							"query": [
								{
									"key": "termCode",
									"value": "189001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET v2/academic/terms - expect 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET v2/academic/terms - expect 40X missing client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/academic/terms - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranTerm = \"IntTest\" + (Math.ceil(Math.random() * 999999)) + 1\r",
									"// console.log(ranTerm)\r",
									"pm.collectionVariables.set('putTermsTermCode', ranTerm)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"termCode\": \"{{putTermsTermCode}}\",\r\n\t\"term\": \"Fall 2018\",\r\n\t\"startDate\": \"2018-08-20\",\r\n\t\"endDate\": \"2018-12-06\",\r\n\t\"financialAidYearCode\": \"1819\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET v2/academic/terms?termCode - expect the return record to equal the put request payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"const termsPayload = pm.collectionVariables.get('putTermsCreatePayload')\r",
									"pm.test('Expect terms record to equal the PUT payload', function() {\r",
									"    // console.log(termsPayload)\r",
									"    const record = json.data[0]\r",
									"    const objKeys = Object.keys(termsPayload);\r",
									"    let err = 0;\r",
									"    for (key in objKeys) {\r",
									"        if (record[objKeys[key]] !== termsPayload[objKeys[key]] && record[objKeys[key] !== null]) {\r",
									"            console.log(`${record[objKeys[key]]} and ${termsPayload[objKeys[key]]}`)\r",
									"            err++\r",
									"        }\r",
									"    }\r",
									"    pm.expect(err).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms?termCode={{putTermsTermCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							],
							"query": [
								{
									"key": "termCode",
									"value": "{{putTermsTermCode}}"
								}
							]
						},
						"description": "This ignores null values because the Fall 2018 term in the put payload is set to null when being entered into Dynamics because there is no termCode in Dynamics for the random term we are creating in Dynamics term option set"
					},
					"response": []
				},
				{
					"name": "PUT v2/academic/terms - expect updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putTermsUpdatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"termCode\": \"{{putTermsTermCode}}\",\r\n\t\"term\": \"Fall 2018\",\r\n\t\"startDate\": \"2019-08-20\",\r\n\t\"endDate\": \"2019-12-06\",\r\n\t\"financialAidYearCode\": \"1819\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET v2/academic/terms?termCode - expect the return record to equal the put request payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"const termsPayload = pm.collectionVariables.get('putTermsUpdatePayload')\r",
									"pm.test('Expect terms record to equal the PUT payload', function() {\r",
									"    // console.log(termsPayload)\r",
									"    const record = json.data[0]\r",
									"    const objKeys = Object.keys(termsPayload);\r",
									"    let err = 0;\r",
									"    for (key in objKeys) {\r",
									"        if (record[objKeys[key]] !== termsPayload[objKeys[key]] && record[objKeys[key]] !== null) {\r",
									"            console.log(`${record[objKeys[key]]} and ${termsPayload[objKeys[key]]}`)\r",
									"            err++\r",
									"        }\r",
									"    }\r",
									"    pm.expect(err).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms?termCode={{putTermsTermCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							],
							"query": [
								{
									"key": "termCode",
									"value": "{{putTermsTermCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/academic/terms - expect 400 bad request missing termCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"termCode\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"termId\": \"635801f6-4473-e911-a82b-000d3a365f\",\r\n\t\"term\": \"Fall 2011\",\r\n\t\"startDate\": \"2018-08-20\",\r\n\t\"endDate\": \"2018-12-06\",\r\n\t\"financialAidYearCode\": \"1819\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/academic/terms - expect 400 missing term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"term\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"termId\": \"635801f6-4473-e911-a82b-000d3a365f\",\r\n\t\"termCode\": \"201808\",\r\n\t\"startDate\": \"2018-08-20\",\r\n\t\"endDate\": \"2018-12-06\",\r\n\t\"financialAidYearCode\": \"1819\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/academic/terms - expect 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"termId\": \"635801f6-4473-e911-a82b-000d3a365f\",\r\n\t\"termCode\": \"201808\",\r\n\t\"term\": \"Fall 2018\",\r\n\t\"startDate\": \"2018-08-20\",\r\n\t\"endDate\": \"2018-12-06\",\r\n\t\"financialAidYearCode\": \"1819\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/academic/terms - expect 40X missing client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"termId\": \"635801f6-4473-e911-a82b-000d3a365f\",\r\n\t\"termCode\": \"201808\",\r\n\t\"term\": \"Fall 2018\",\r\n\t\"startDate\": \"2018-08-20\",\r\n\t\"endDate\": \"2018-12-06\",\r\n\t\"financialAidYearCode\": \"1819\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/academic/terms",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"academic",
								"terms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/attributes",
			"item": [
				{
					"name": "GET /v2/attributes?attributeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"attributeCode\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"attributeId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"description\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"All records have the same attribute code\", function() {\r",
									"    const attributeCode = pm.request.url.query.get('attributeCode')\r",
									"    let err = 0;\r",
									"    for (let i = 0; i < json.data.length; i++) {\r",
									"        const record = json.data[i]\r",
									"        if (record.attributeCode !== attributeCode) {\r",
									"            console.log(`${record.attributeCode} and ${attributeCode}`)\r",
									"            err++;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(err).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/attributes?attributeCode=CRM35",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"attributes"
							],
							"query": [
								{
									"key": "attributeCode",
									"value": "CRM35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/attributes?attributeCode - expect empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    pm.expect(json.data.length).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/attributes?attributeCode=TEST",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"attributes"
							],
							"query": [
								{
									"key": "attributeCode",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/attributes?attributeCode - expect 400 missing attributeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"attributeCode\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/attributes?attributeCode - expect 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/attributes?attributeCode=CRM35",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"attributes"
							],
							"query": [
								{
									"key": "attributeCode",
									"value": "CRM35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/attributes?attributeCode - expect 40X missing client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/attributes?attributeCode=CRM35",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"attributes"
							],
							"query": [
								{
									"key": "attributeCode",
									"value": "CRM35"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/accounts",
			"item": [
				{
					"name": "GET /v2/accounts?schoolId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"accountId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"accountType\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"schoolId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"All records have the same attribute code\", function() {\r",
									"    const schoolId = pm.request.url.query.get('schoolId')\r",
									"    let err = 0;\r",
									"    for (let i = 0; i < json.data.length; i++) {\r",
									"        const record = json.data[i]\r",
									"        if (record.schoolId !== schoolId) {\r",
									"            console.log(`${record.schoolId} and ${schoolId}`)\r",
									"            err++;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(err).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts?schoolId=F17441",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							],
							"query": [
								{
									"key": "schoolId",
									"value": "F17441"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/accounts?schoolId - expect empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    pm.expect(json.data.length).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts?schoolId=TEST",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							],
							"query": [
								{
									"key": "schoolId",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/accounts?schoolId - expect 400 missing schoolid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"schoolId\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/accounts?schoolId - expect 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts?schoolId=F17441",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							],
							"query": [
								{
									"key": "schoolId",
									"value": "F17441"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/accounts?schoolId - expect 40X missing client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts?schoolId=F17441",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							],
							"query": [
								{
									"key": "schoolId",
									"value": "F17441"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/accounts - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putAccountsUpdatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect created successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"accountId\": \"d2040806-9d7d-e911-a82b-000d3a365fc2\",\r\n   \"accountType\": \"School\",\r\n   \"schoolId\": \"{{putAccountsSchoolId}}\",\r\n   \"ficeCode\": \"C123456\",\r\n   \"schoolType\": \"H\",\r\n   \"name\": \"Liberty High School\",\r\n   \"street1\": \"123 Main Ave\",\r\n   \"street2\": \"Apt 2\",\r\n   \"street3\": \"1st Flr\",\r\n   \"city\": \"Rohnert Park\",\r\n   \"countyCode\": \"CA097\",\r\n   \"zip\": \"94928\",\r\n   \"stateCode\": \"CA\",\r\n   \"nationCode\": \"US\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/accounts - updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putAccountsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.collectionVariables.set('putAccountsAccountId', json.data.accountId)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"accountType\": \"School\",\r\n   \"schoolId\": \"{{putAccountsAccountId}}\",\r\n   \"ficeCode\": \"C123456\",\r\n   \"schoolType\": \"H\",\r\n   \"name\": \"Liberty High School\",\r\n   \"street1\": \"123 Main Ave\",\r\n   \"street2\": \"Apt 2\",\r\n   \"street3\": \"1st Flr\",\r\n   \"city\": \"Rohnert Park\",\r\n   \"countyCode\": \"CA097\",\r\n   \"zip\": \"94928\",\r\n   \"stateCode\": \"CA\",\r\n   \"nationCode\": \"US\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/accounts - expect 400 missing accountType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"accountType\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"accountId\": \"d2040806-9d7d-e911-a82b-000d3a365fc2\",\r\n   \"schoolId\": \"C123456\",\r\n   \"ficeCode\": \"C123456\",\r\n   \"schoolType\": \"H\",\r\n   \"name\": \"Liberty High School\",\r\n   \"street1\": \"123 Main Ave\",\r\n   \"street2\": \"Apt 2\",\r\n   \"street3\": \"1st Flr\",\r\n   \"city\": \"Rohnert Park\",\r\n   \"countyCode\": \"CA097\",\r\n   \"zip\": \"94928\",\r\n   \"stateCode\": \"CA\",\r\n   \"nationCode\": \"US\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/accounts - expect 400 missing name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"name\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"accountId\": \"d2040806-9d7d-e911-a82b-000d3a365fc2\",\r\n   \"accountType\": \"School\",\r\n   \"schoolId\": \"C123456\",\r\n   \"ficeCode\": \"C123456\",\r\n   \"schoolType\": \"H\",\r\n   \"street1\": \"123 Main Ave\",\r\n   \"street2\": \"Apt 2\",\r\n   \"street3\": \"1st Flr\",\r\n   \"city\": \"Rohnert Park\",\r\n   \"countyCode\": \"CA097\",\r\n   \"zip\": \"94928\",\r\n   \"stateCode\": \"CA\",\r\n   \"nationCode\": \"US\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/accounts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/events",
			"item": [
				{
					"name": "POST v2/events - minimum fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"// pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect created successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"vzEventId\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/events",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/events - full fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"// pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"vzEventId\": \"123\",\r\n    \"title\": \"funTime\",\r\n    \"startDate\": \"2019-06-25T16:00:00Z\",\r\n    \"endDate\": \"2019-06-25T17:00:00Z\",\r\n    \"campus\": \"Tampa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/events",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/events - expect 400 missing vzEventId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 400 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.description\r",
									"    const containsDuplicate = errMsg.includes(\"vzEventId\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"funTime\",\r\n    \"startDate\": \"2019-06-25T16:00:00Z\",\r\n    \"endDate\": \"2019-06-25T17:00:00Z\",\r\n    \"campus\": \"Tampa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/events",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts",
			"item": [
				{
					"name": "PUT v2/contacts - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putContactsContactId', json.data.contactId)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect created successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranUsfId = \"U\" + Math.floor(10000000 + Math.random() * 90000000)\r",
									"// console.log(ranUsfId)\r",
									"pm.collectionVariables.set('putContactsUsfId', ranUsfId)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"{{putContactsUsfId}}\",\r\n\t\"netId\": \"test2\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"// pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"{{putContactsUsfId}}\",\r\n\t\"netId\": \"test\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"Test\", \r\n\t\"middleName\": \"Middle\",\r\n\t\"lastName\": \"Testerson\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-16\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - missing all address1 fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"U12345678\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - missing all address2 fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"U12345678\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - updated successfully added Banner source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"// pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Banner\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"{{putContactsUsfId}}\",\r\n\t\"netId\": \"test\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"Test\", \r\n\t\"middleName\": \"Middle\",\r\n\t\"lastName\": \"Testerson\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-16\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - entity not altered banner in source list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"// pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Entity Not Altered\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"{{putContactsUsfId}}\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - expect 500 exception for bad address1-countryCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect address2State-Test to be the error message', function() {\r",
									"    const responseMessage = json.errors[0].error\r",
									"    pm.expect(responseMessage).to.include(\"address1Country-Test has returned null\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"U12345678\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"Test\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - expect 500 exception for bad address2-countryCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect address2State-Test to be the error message', function() {\r",
									"    const responseMessage = json.errors[0].error\r",
									"    pm.expect(responseMessage).to.include(\"address2Country-Test has returned null\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"U12345678\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"Test\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - expect 500 exception for bad address1-stateCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect address2State-Test to be the error message', function() {\r",
									"    const responseMessage = json.errors[0].error\r",
									"    pm.expect(responseMessage).to.include(\"address1State-Test has returned null\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"U12345678\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"Test\",\r\n\t\"address1-state\": \"Test\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - expect 500 exception for bad address2-stateCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect address2State-Test to be the error message', function() {\r",
									"    const responseMessage = json.errors[0].error\r",
									"    pm.expect(responseMessage).to.include(\"address2State-Test has returned null\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"U12345678\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"1998-04-15\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"Test\",\r\n\t\"address2-state\": \"Test\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts - expect 400 birthDate is not in date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"contactId\": \"5cef0fd9-4a77-e911-a82b-000d3a365662\",\r\n\t\"source\": \"Event Portal\",\r\n\t\"sourceDate\" : \"1998-04-15\",\r\n\t\"sourceCode\": \"OneUSF\",\r\n\t\"usfId\": \"U12345678\",\r\n\t\"netId\": \"bloblaw\",\r\n\t\"contactType\": \"Student\", \r\n\t\"firstName\": \"William3\", \r\n\t\"middleName\": \"Mccain\",\r\n\t\"lastName\": \"Clark2\", \r\n\t\"gender\": \"Male\",  \r\n\t\"birthDate\": \"test\",\r\n\t\"mobilePhone\": \"16756754444\",\r\n\t\"telephone2\": \"16756754444\", \r\n\t\"email1\": \"wclark2@somewhere.com\", \r\n\t\"email2\": null,      \r\n\t\"usfLoginActivationCode\": \"c001\",\r\n\t\"citizenshipType\": \"Citizen (USA)\",\r\n\t\"deceased\": \"No\",\r\n\t\"setConfidential\": \"No\",   \r\n\t\"ethnicityCode\": \"as001\",\r\n\t\"ethnicityDescription\": \"desc\",\r\n\t\"hispanicOrLatino\": \"No\",\r\n\t\"blackafricanamerican\": \"No\",\r\n\t\"nativeHawaiianPacificIslander\": \"No\",\r\n\t\"white\": \"Yes\",\r\n\t\"asian\": \"No\",\r\n\t\"americanIndianAlaskanNative\": \"No\",\r\n\t\"address1-country\": \"United States\", \r\n\t\"address1-countryCode\": \"US\",\r\n\t\"address1-stateCode\": \"WV\",\r\n\t\"address1-state\": \"West Virginia\", \r\n\t\"address1-county\": \"Hancock\",\r\n\t\"address1-street1\": \"NMN fairfax\",\r\n\t\"address1-street2\": \"\",\r\n\t\"address1-street3\": \"\",\r\n\t\"address1-zipCode\": \"12346\",\r\n\t\"address1-city\": \"Dover\",\r\n\t\"address1-type\": \"Primary\",\r\n\t\"address2-country\": \"United States\",\r\n\t\"address2-countryCode\": \"US\",\r\n\t\"address2-stateCode\": \"FL\",\r\n\t\"address2-state\": \"Florida\",\r\n\t\"address2-county\": \"Jefferson\",\r\n\t\"address2-street1\": \"SS fairfax\",\r\n\t\"address2-street2\": \"\",\r\n\t\"address2-street3\": \"\",\r\n\t\"address2-zipCode\": \"12345\",\r\n\t\"address2-city\": \"denver\",\r\n\t\"address2-type\": \"Bill To\",\r\n\t\"orientationStatusCode\": \"A\",\r\n\t\"orientationStatus\": \"Attended\",\r\n\t\"consentToProcessData\": \"2020-07-15T13:00:00Z\",\r\n\t\"consentToCommunicate\": \"2020-07-15T13:00:00Z\",\r\n\t\"returnToCampusFlag\": \"Yes\",\r\n\t\"hsLegalBasis\": \"100000002\",\r\n\t\"hsMarketableStatus\": false,\r\n\t\"hsObjectId\": \"6020002\",\r\n\t\"hsEmailOptout\": \"False\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/priorCollegeHistory",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/priorCollegeHistory- created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"accountId\": \"{{putAccountsAccountId}}\",\r\n    \"institutionCode\": \"002629\",\r\n    \"institution\": \"Rutgers, State Univ of NJ\",\r\n    \"degreeCode\": \"BA\",\r\n    \"degree\": \"Bachelor of Arts\",\r\n    \"GPA\": 3.04,\r\n    \"isOfficial\": true,\r\n    \"degreeDate\": \"1973-06-05\",\r\n\t\"source\": \"banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/priorCollegeHistory",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"priorCollegeHistory"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/priorCollegeHistory- updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"accountId\": \"{{putAccountsAccountId}}\",\r\n    \"institutionCode\": \"002629\",\r\n    \"institution\": \"Rutgers, State Univ of NJ\",\r\n    \"degreeCode\": \"BA\",\r\n    \"degree\": \"Bachelor of Arts\",\r\n    \"GPA\": 3.04,\r\n    \"isOfficial\": true,\r\n    \"degreeDate\": \"1973-06-05\",\r\n\t\"source\": \"banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/priorCollegeHistory",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"priorCollegeHistory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/highSchoolHistory",
			"item": [
				{
					"name": "PUT v2/contacts/{contactId}/highSchoolHistory - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranSource = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranSource)\r",
									"pm.collectionVariables.set(\"putContactsHighSchoolHistorySource\", ranSource)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"accountId\": \"{{putAccountsAccountId}}\",\r\n\t\"graduationDate\": \"2020-05-11\",\r\n\t\"highSchoolCode\": \"000090\",\r\n\t\"highSchoolName\": \"Roosevelt High School\",\r\n\t\"GPA\": 3.8,\r\n\t\"ssarGpa\": 4.0,\r\n    \"ssarGraduationDate\": \"2019-05-11\",\r\n    \"ssarReportedDate\":   \"2019-05-11\",\r\n\t\"source\": \"{{putContactsHighSchoolHistorySource}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/highSchoolHistory",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"highSchoolHistory"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/highSchoolHistory - updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Entity Not Altered\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"accountId\": \"{{putAccountsAccountId}}\",\r\n\t\"graduationDate\": \"2020-05-11\",\r\n\t\"highSchoolCode\": \"000090\",\r\n\t\"highSchoolName\": \"Roosevelt High School\",\r\n\t\"GPA\": 3.8,\r\n\t\"ssarGpa\": 4.0,\r\n    \"ssarGraduationDate\": \"2019-05-11\",\r\n    \"ssarReportedDate\":   \"2019-05-11\",\r\n\t\"source\": \"{{putContactsHighSchoolHistorySource}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/highSchoolHistory",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"highSchoolHistory"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/highSchoolHistory - created successfully banner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"accountId\": \"{{putAccountsAccountId}}\",\r\n\t\"graduationDate\": \"2019-05-11\",\r\n\t\"highSchoolCode\": \"000089\",\r\n\t\"highSchoolName\": \"Roosevelt High School\",\r\n\t\"GPA\": 3.8,\r\n\t\"ssarGpa\": 4.0,\r\n    \"ssarGraduationDate\": \"2019-05-11\",\r\n    \"ssarReportedDate\":   \"2019-05-11\",\r\n\t\"source\": \"banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/highSchoolHistory",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"highSchoolHistory"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/highSchoolHistory - update successfully banner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"accountId\": \"{{putAccountsAccountId}}\",\r\n\t\"graduationDate\": \"2019-05-11\",\r\n\t\"highSchoolCode\": \"000089\",\r\n\t\"highSchoolName\": \"Roosevelt High School\",\r\n\t\"GPA\": 3.8,\r\n\t\"ssarGpa\": 4.0,\r\n    \"ssarGraduationDate\": \"2019-05-11\",\r\n    \"ssarReportedDate\":   \"2019-05-11\",\r\n\t\"source\": \"banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/highSchoolHistory",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"highSchoolHistory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/match",
			"item": [
				{
					"name": "GET /v2/contacts/match?usfId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"contactId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"source\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('contactId', json.data.contactId)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?usfId={{getContactUsfId}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "usfId",
									"value": "{{getContactUsfId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?emailaddress2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"contactId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"source\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?emailaddress2={{getContactEmailAddress2}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "emailaddress2",
									"value": "{{getContactEmailAddress2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?firstname&lastname&birthdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"contactId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"source\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?firstname={{getContactFirstName}}&lastname={{getContactLastName}}&birthdate={{getContactBirthDate}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{getContactFirstName}}"
								},
								{
									"key": "lastname",
									"value": "{{getContactLastName}}"
								},
								{
									"key": "birthdate",
									"value": "{{getContactBirthDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?firstname&lastname&emailaddress1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"contactId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"source\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?firstname={{getContactFirstName}}&lastname={{getContactLastName}}&emailaddress1={{getContactEmailAddress1}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{getContactFirstName}}"
								},
								{
									"key": "lastname",
									"value": "{{getContactLastName}}"
								},
								{
									"key": "emailaddress1",
									"value": "{{getContactEmailAddress1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?firstname&lastname&mobilePhone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"contactId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"source\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?firstname={{getContactFirstName}}&lastname={{getContactLastName}}&mobilePhone={{getContactMobilePhone}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{getContactFirstName}}"
								},
								{
									"key": "lastname",
									"value": "{{getContactLastName}}"
								},
								{
									"key": "mobilePhone",
									"value": "{{getContactMobilePhone}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?firstName - expect 500 firstName requires lastName and birthdate, email1, or mobilePhone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?firstname={{getContactFirstName}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{getContactFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?lastname -  expect 500 lastname requires firstname and birthdate, emailaddress1, or mobilePhone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?lastname={{getContactLastName}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "lastname",
									"value": "{{getContactLastName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?birthdate -  expect 500 birthdate requires firstname and lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?birthdate={{getContactBirthDate}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "birthdate",
									"value": "{{getContactBirthDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match?emailaddress2 - expect 500 not a usf.edu email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match?emailaddress2=test@test.com",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							],
							"query": [
								{
									"key": "emailaddress2",
									"value": "test@test.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/match - expect 500 no query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/match",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"match"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}",
			"item": [
				{
					"name": "PATCH v2/contacts/{contractId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putTermsUpdatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usfId\": \"U12345678\",\r\n    \"firstName\": \"Test\",\r\n    \"source\": \"Hubspot\",\r\n    \"middleName\": \"Son\",\r\n    \"lastName\": \"Tester\",\r\n    \"email1\": \"test-1689269822-updated@test.com\",\r\n    \"telephone2\": \"111-111-1111\",\r\n    \"mobilePhone\": \"111-111-1111\",\r\n    \"birthDate\": \"2019-01-01\",\r\n    \"gender\": \"Male\",\r\n    \"hispanicOrLatino\": \"100000000\",\r\n    \"americanIndianAlaskanNative\": \"100000001\",\r\n    \"asian\": \"100000001\",\r\n    \"blackafricanamerican\": \"100000001\",\r\n    \"nativeHawaiianPacificIslander\": \"100000001\",\r\n    \"white\": \"100000001\",\r\n    \"citizenshipType\": \"\",\r\n    \"hsLegalBasis\": \"100000001\",\r\n    \"hsMarketableStatus\": false,\r\n    \"hsObjectId\": \"6020002\",\r\n    \"hsEmailOptout\": \"False\",\r\n    \"contactType\": \"Student\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/eventRegistrations",
			"item": [
				{
					"name": "PUT v2/contacts/{contactId}/eventRegistrations - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"// pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"Cancelled\",\r\n    \"submissionDate\": \"2019-06-25T17:00:00Z\",\r\n    \"attended\":\"Yes\",\r\n    \"vzRegistrantId\":\"{{getOpportunitiesContactId}}\",\r\n    \"eventId\": \"{{getMsEvtMgtEventsEventId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/eventRegistrations",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"eventRegistrations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/interests",
			"item": [
				{
					"name": "PUT v2/contacts/{contactId}/interests - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranMajor = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranInterest)\r",
									"pm.collectionVariables.set(\"putContactsInterestsMajor\", ranMajor)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"type\": \"major\",\r\n\t\"interest\": \"{{putContactsInterestsMajor}}\",\r\n\t\"source\": \"Cappex\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/interests",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"interests"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/interests - created successfully Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Entity Not Altered\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"type\": \"major\",\r\n\t\"interest\": \"{{putContactsInterestsMajor}}\",\r\n\t\"source\": \"Cappex\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/interests",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"interests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/testScores",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/testScores- created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranCompCode = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranCompCode)\r",
									"pm.collectionVariables.set(\"putContactsTestScoresCompCode\", ranCompCode)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"componentCode\": \"{{putContactsTestScoresCompCode}}\",\r\n\t\"description\": \"ACT Written 1\",\r\n\t\"date\": \"2019-05-24\",\r\n\t\"score\": \"5\",\r\n\t\"source\": \"RNL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/testScores",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"testScores"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/testScores- created successfully Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"componentCode\": \"{{putContactsTestScoresCompCode}}\",\r\n\t\"description\": \"ACT Written 1\",\r\n\t\"date\": \"2019-05-24\",\r\n\t\"score\": \"5\",\r\n\t\"source\": \"RNL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/testScores",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"testScores"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/testScores/overallTestScores",
			"item": [
				{
					"name": "PUT v2/contacts/{contactId}/testScores/overallTestScores - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranMajor = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranInterest)\r",
									"pm.collectionVariables.set(\"putContactsInterestsMajor\", ranMajor)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"testId\": \"EACT\",\r\n    \"overAllScore\": \"23\",\r\n    \"component1\": \"EAC1\",\r\n    \"bestScore1\": \"24\",\r\n    \"component2\": \"EAC2\",\r\n    \"bestScore2\": \"22\",\r\n    \"component3\": \"EAC3\",\r\n    \"bestScore3\": \"25\",\r\n    \"component4\": \"EAC4\",\r\n    \"bestScore4\": \"20\",\r\n    \"component5\": \"EAC6\",\r\n    \"bestScore5\": \"23\",\r\n    \"component6\": \"EAC7\",\r\n    \"bestScore6\": \"8\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/testScores/overallTestScores",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"testScores",
								"overallTestScores"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/financialAids",
			"item": [
				{
					"name": "PUT v2/contacts/{contactId}/financialAids - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranFinCode = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranInterest)\r",
									"pm.collectionVariables.set(\"putContactsFinancialAidsFinCode\", ranFinCode)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"financialAidYearCode\": \"{{putContactsFinancialAidsFinCode}}\",\r\n\t\"pellQualified\": \"Yes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/financialAids",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"financialAids"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/financialAids - created successfully Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"financialAidYearCode\": \"{{putContactsFinancialAidsFinCode}}\",\r\n\t\"pellQualified\": \"No\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/financialAids",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"financialAids"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/affiliations",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/affiliations- created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranKeyGlobalDept = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranKeyGlobalDept)\r",
									"pm.collectionVariables.set(\"postContactsAffiliationsKeyGlobalDept\", ranKeyGlobalDept)\r",
									"pm.collectionVariables.set(\"postContactAffiliationsRole\", \"Student\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"role\": \"{{postContactAffiliationsRole}}\",\r\n\t\"keyGlobalDept\": \"{{postContactsAffiliationsKeyGlobalDept}}\",\r\n\t\"globalDeptName\": \"ANCILLARY SUPPORT\",\r\n    \"globalCollegeName\": \"USF Health\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/affiliations",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"affiliations"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/affiliations- update successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect entity not altered', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Entity Not Altered\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"role\": \"{{postContactAffiliationsRole}}\",\r\n\t\"keyGlobalDept\": \"{{postContactsAffiliationsKeyGlobalDept}}\",\r\n\t\"globalDeptName\": \"ANCILLARY SUPPORT\",\r\n    \"globalCollegeName\": \"USF Health\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/affiliations",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"affiliations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/affiliations/{role}/{keyGlobalDept}",
			"item": [
				{
					"name": "DELETE v2/contacts/{contactId}/affiliations/{role}/{keyGlobalDept} - deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/affiliations/{{postContactAffiliationsRole}}/{{postContactsAffiliationsKeyGlobalDept}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"affiliations",
								"{{postContactAffiliationsRole}}",
								"{{postContactsAffiliationsKeyGlobalDept}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE v2/contacts/{contactId}/affiliations/{role}/{keyGlobalDept} - expect 404 deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/affiliations/{{postContactAffiliationsRole}}/{{postContactsAffiliationsKeyGlobalDept}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"affiliations",
								"{{postContactAffiliationsRole}}",
								"{{postContactsAffiliationsKeyGlobalDept}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/attributes",
			"item": [
				{
					"name": "GET /v2/contacts/{contactId}/attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"contactAttributeId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"attributeCode\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"attributeId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"attribute\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"source\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('getContactAttributesAttributeCode', json.data[0].attributeCode)\r",
									"pm.collectionVariables.set('getContactAttributesAttributeId', json.data[0].attributeId)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getContactAttributesContactId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getContactAttributesContactId}}",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/attributes?attributeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"contactAttributeId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"attributeCode\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"attributeId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"attribute\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"source\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"404ContactId\", \"1234\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getContactAttributesContactId}}/attributes?attributeCode={{getContactAttributesAttributeCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getContactAttributesContactId}}",
								"attributes"
							],
							"query": [
								{
									"key": "attributeCode",
									"value": "{{getContactAttributesAttributeCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/attributes - expect empty data array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 500', function () {\r",
									"    pm.response.to.have.status(500);\r",
									"})\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    const data = json.data\r",
									"    pm.expect(data).to.eql(null)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{404ContactId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{404ContactId}}",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/attributes?attributeCode - expect empty data array no attributeCode in array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    pm.expect(json.data.length).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getContactAttributesContactId}}/attributes?attributeCode=TEST",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getContactAttributesContactId}}",
								"attributes"
							],
							"query": [
								{
									"key": "attributeCode",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/attributes - expect 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getContactAttributesContactId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getContactAttributesContactId}}",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/attributes - expect 40X missing client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getContactAttributesContactId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getContactAttributesContactId}}",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/attributes- created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set(\"postContactsAttributeAttributeId\", json.data.contactAttributeId)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranAttributeCode = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranAttributeCode)\r",
									"pm.collectionVariables.set(\"postContactsAttributesAttributeCode\", ranAttributeCode)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"attributeCode\": \"{{postContactsAttributesAttributeCode}}\",\r\n \t\"attributeId\": \"{{getContactAttributesAttributeId}}\",\r\n \t\"attribute\": \"Example text\",\r\n \t\"source\": \"Banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getContactAttributesContactId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getContactAttributesContactId}}",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/attributes- updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"attributeCode\": \"{{postContactsAttributesAttributeCode}}\",\r\n \t\"attributeId\": \"{{getContactAttributesAttributeId}}\",\r\n \t\"attribute\": \"Example text\",\r\n \t\"source\": \"Banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getContactAttributesContactId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getContactAttributesContactId}}",
								"attributes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/attributes/{attributeId}",
			"item": [
				{
					"name": "DELETE v2/contacts/{contactId}/attributes/{attributeId} - deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/attributes/{{postContactsAttributeAttributeId}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"attributes",
								"{{postContactsAttributeAttributeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE v2/contacts/{contactId}/attributes/{attributeId} - expect 404 already deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/attributes/{{postContactsAttributeAttributeId}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"attributes",
								"{{postContactsAttributeAttributeId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/opportunities",
			"item": [
				{
					"name": "GET /v2/contacts/{contactId}/opportunities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"opportunityId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"source\": {\r",
									"                        \"type\": [\"string\", \"null\"]\r",
									"                    },\r",
									"                    \"preferredCampus\": {\r",
									"                        \"type\": [\"null\", \"string\"]\r",
									"                    },\r",
									"                    \"stage\": {\r",
									"                        \"type\": [\"null\", \"string\"]\r",
									"                    },\r",
									"                    \"status\": {\r",
									"                        \"type\": [\"null\", \"string\"]\r",
									"                    },\r",
									"                    \"opportunityType\": {\r",
									"                        \"type\": [\"null\", \"string\"]\r",
									"                    },\r",
									"                    \"usfId\": {\r",
									"                        \"type\": [\"null\", \"string\"]\r",
									"                    },\r",
									"                    \"unsubmittedApplicationStep\": {\r",
									"                        \"type\": [\"null\", \"string\"]\r",
									"                    },\r",
									"                    \"application\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"studentType\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"entryTerm\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"applicationNumber\": {\r",
									"                                \"type\": [\"null\", \"number\"]\r",
									"                            },\r",
									"                            \"sourceId\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"dateApplied\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"decisionDate\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"decisionCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"decision\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"admitCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"admitDescription\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"typeCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"typeDescription\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"levelCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"level\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"statusCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"statusDescription\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"campusCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"campus\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"collegeCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"college\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"majorCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"major\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"degreeCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"degree\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"programCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"program\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"concentrationCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"concentration\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"residencyCode\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"residencyDescription\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"disciplined\": {\r",
									"                                \"type\": \"boolean\"\r",
									"                            },\r",
									"                            \"legalViolation\": {\r",
									"                                \"type\": \"boolean\"\r",
									"                            },\r",
									"                            \"nationOfCitizenship\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"nationOfCitizenship-country\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"graduateStudentInterestPerApp\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                            \"gradOpportunityComment\": {\r",
									"                                \"type\": [\"null\", \"string\"]\r",
									"                            },\r",
									"                        }\r",
									"                    }\r",
									"                }   \r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('getContactOpportunitiesEntryTerm', json.data[0].application.entryTerm)\r",
									"pm.collectionVariables.set('getContactOpportunitiesApplNum', json.data[0].application.applicationNumber)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/opportunities?entryTerm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"All records have the same entry term\", function() {\r",
									"    const entryTerm = pm.request.url.query.get('entryTerm')\r",
									"    let err = 0;\r",
									"    for (let i = 0; i < json.data.length; i++) {\r",
									"        const record = json.data[i]\r",
									"        if (record.application.entryTerm !== entryTerm) {\r",
									"            console.log(`${record.application.entryTerm} and ${entryTerm}`)\r",
									"            err++;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(err).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities?entryTerm={{getContactOpportunitiesEntryTerm}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							],
							"query": [
								{
									"key": "entryTerm",
									"value": "{{getContactOpportunitiesEntryTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/opportunities?applicationNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"All records have the same application number\", function() {\r",
									"    const applicationNumber = Number.parseInt(pm.request.url.query.get('applicationNumber'))\r",
									"    let err = 0;\r",
									"    for (let i = 0; i < json.data.length; i++) {\r",
									"        const record = json.data[i]\r",
									"        if (record.application.applicationNumber !== applicationNumber) {\r",
									"            console.log(`${record.application.applicationNumber} and ${applicationNumber}`)\r",
									"            err++;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(err).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities?applicationNumber={{getContactOpportunitiesApplNum}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							],
							"query": [
								{
									"key": "applicationNumber",
									"value": "{{getContactOpportunitiesApplNum}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/opportunities- expect empty data array no opportunities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    const data = json.data\r",
									"    pm.expect(data).to.eql(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{404ContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{404ContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/opportunities?entryTerm - expect empty data array non existing entry term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    pm.expect(json.data.length).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities?entryTerm=TEST",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							],
							"query": [
								{
									"key": "entryTerm",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/opportunities?applicationNumber - expect empty data array non existing application number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Expect empty data array\", function() {\r",
									"    pm.expect(json.data.length).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities?applicationNumber=200",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							],
							"query": [
								{
									"key": "applicationNumber",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/opportunities- 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/opportunities - 40X missing client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/opportunities - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putContactsOpportunityId', json.data.opportunityId)\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranUsfId = \"U\" + Math.floor(10000000 + Math.random() * 90000000)\r",
									"// console.log(ranUsfId)\r",
									"pm.collectionVariables.set('putOpportunitiesUsfId', ranUsfId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"opportunityId\": \"635801f6-4473-e911-a82b-000d3a365fc2\", \r\n   \"source\": \"Banner\",\r\n   \"preferredCampus\": \"Tampa\",\r\n   \"stage\": \"Applicant\",\r\n   \"status\": \"Active\",\r\n   \"opportunityType\": \"Undergraduate\",\r\n   \"usfId\": \"{{putOpportunitiesUsfId}}\",\r\n   \"unsubmittedApplicationStep\": \"Application Stage\",\r\n   \"application\": {\r\n     \"studentType\": \"Transfer\",\r\n   \t \"entryTerm\":  \"{{putTermsTermCode}}\", \r\n\t   \"applicationNumber\": 3,\r\n     \"sourceId\": \"VZ12345678\",\r\n     \"dateApplied\": \"2019-09-21\",\r\n     \"decisionDate\": \"2019-10-25\",\r\n     \"decisionCode\": \"RR\", \r\n     \"decision\":  \"Canceled Application\",\r\n     \"admitCode\": \"ABC\",\r\n     \"admitDescription\": \"Bla bla bla\",\r\n     \"typeCode\": \"TRN\",\r\n     \"typeDescription\": \"Transfer\",\r\n     \"levelCode\": \"UG\",\r\n     \"level\": \"Undergraduate\",\r\n     \"statusCode\": \"D\",\r\n     \"statusDescription\": \"great\",\r\n     \"campusCode\": \"T\",\r\n     \"campus\": \"Tampa\",\r\n     \"collegeCode\": \"LAS\",\r\n     \"college\": \"Liberal Arts and Sciences\",\r\n     \"majorCode\": \"ENG\",\r\n     \"major\": \"English\",\r\n     \"degreeCode\": \"000000\",\r\n     \"degree\": \"Undeclared\",\r\n     \"programCode\": \"GR-AS-MA-PSY\",\r\n     \"program\": \"program name example\",\r\n     \"concentrationCode\": \"ENG\",\r\n     \"concentration\": \"English\",\r\n     \"residencyCode\": \"Florida Resident\",\r\n     \"residencyDescription\": \"Florida Resident\",\r\n\t   \"disciplined\": false,\r\n\t   \"legalViolation\": false,\r\n\t   \"nationOfCitizenship\": \"US\",\r\n\t   \"nationOfCitizenship-country\": \"United States\",\r\n\t   \"graduateStudentInterestPerApp\": \"Student Interest Text\",\r\n     \"gradOpportunityComment\": \"1/4/2019 John: Comment on application\"\r\n   }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/opportunities - created successfully graduate with empty studentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set('putTermsTermCode', JSON.parse(pm.request.body).termCode)\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"// pm.collectionVariables.set('putTermsCreatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"opportunityId\": \"635801f6-4473-e911-a82b-000d3a365fc2\", \r\n   \"source\": \"Banner\",\r\n   \"preferredCampus\": \"Tampa\",\r\n   \"stage\": \"Applicant\",\r\n   \"status\": \"Active\",\r\n   \"opportunityType\": \"Graduate\",\r\n   \"usfId\": \"{{putOpportunitiesUsfId}}\",\r\n   \"unsubmittedApplicationStep\": \"Application Stage\",\r\n   \"application\": {\r\n     \"studentType\": \"\",\r\n   \t \"entryTerm\":  \"{{putTermsTermCode}}\", \r\n\t   \"applicationNumber\": 3,\r\n     \"sourceId\": \"VZ12345678\",\r\n     \"dateApplied\": \"2019-09-21\",\r\n     \"decisionDate\": \"2019-10-25\",\r\n     \"decisionCode\": \"RR\", \r\n     \"decision\":  \"Canceled Application\",\r\n     \"admitCode\": \"ABC\",\r\n     \"admitDescription\": \"Bla bla bla\",\r\n     \"typeCode\": \"TRN\",\r\n     \"typeDescription\": \"Transfer\",\r\n     \"levelCode\": \"UG\",\r\n     \"level\": \"Undergraduate\",\r\n     \"statusCode\": \"D\",\r\n     \"statusDescription\": \"great\",\r\n     \"campusCode\": \"T\",\r\n     \"campus\": \"Tampa\",\r\n     \"collegeCode\": \"LAS\",\r\n     \"college\": \"Liberal Arts and Sciences\",\r\n     \"majorCode\": \"ENG\",\r\n     \"major\": \"English\",\r\n     \"degreeCode\": \"000000\",\r\n     \"degree\": \"Undeclared\",\r\n     \"programCode\": \"GR-AS-MA-PSY\",\r\n     \"program\": \"program name example\",\r\n     \"concentrationCode\": \"ENG\",\r\n     \"concentration\": \"English\",\r\n     \"residencyCode\": \"Florida Resident\",\r\n     \"residencyDescription\": \"Florida Resident\",\r\n\t   \"disciplined\": false,\r\n\t   \"legalViolation\": false,\r\n\t   \"nationOfCitizenship\": \"US\",\r\n\t   \"nationOfCitizenship-country\": \"United States\",\r\n\t   \"graduateStudentInterestPerApp\": \"Student Interest Text\",\r\n     \"gradOpportunityComment\": \"1/4/2019 John: Comment on application\"\r\n   }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/opportunities - expect 500 empty studentType and is an undergraduate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect address2State-Test to be the error message', function() {\r",
									"    const responseMessage = json.errors[0].error\r",
									"    pm.expect(responseMessage).to.include(\"studentType and entryTerm values must be supplied\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"opportunityId\": \"635801f6-4473-e911-a82b-000d3a365fc2\", \r\n   \"source\": \"Banner\",\r\n   \"preferredCampus\": \"Tampa\",\r\n   \"stage\": \"Applicant\",\r\n   \"status\": \"Active\",\r\n   \"opportunityType\": \"Undergraduate\",\r\n   \"usfId\": \"U26133059\",\r\n   \"unsubmittedApplicationStep\": \"Application Stage\",\r\n   \"application\": {\r\n     \"studentType\": \"\",\r\n   \t \"entryTerm\":  \"\", \r\n\t   \"applicationNumber\": 3,\r\n     \"sourceId\": \"VZ12345678\",\r\n     \"dateApplied\": \"2019-09-21\",\r\n     \"decisionDate\": \"2019-10-25\",\r\n     \"decisionCode\": \"RR\", \r\n     \"decision\":  \"Canceled Application\",\r\n     \"admitCode\": \"ABC\",\r\n     \"admitDescription\": \"Bla bla bla\",\r\n     \"typeCode\": \"TRN\",\r\n     \"typeDescription\": \"Transfer\",\r\n     \"levelCode\": \"UG\",\r\n     \"level\": \"Undergraduate\",\r\n     \"statusCode\": \"D\",\r\n     \"statusDescription\": \"great\",\r\n     \"campusCode\": \"T\",\r\n     \"campus\": \"Tampa\",\r\n     \"collegeCode\": \"LAS\",\r\n     \"college\": \"Liberal Arts and Sciences\",\r\n     \"majorCode\": \"ENG\",\r\n     \"major\": \"English\",\r\n     \"degreeCode\": \"000000\",\r\n     \"degree\": \"Undeclared\",\r\n     \"programCode\": \"GR-AS-MA-PSY\",\r\n     \"program\": \"program name example\",\r\n     \"concentrationCode\": \"ENG\",\r\n     \"concentration\": \"English\",\r\n     \"residencyCode\": \"Florida Resident\",\r\n     \"residencyDescription\": \"Florida Resident\",\r\n\t   \"disciplined\": false,\r\n\t   \"legalViolation\": false,\r\n\t   \"nationOfCitizenship\": \"US\",\r\n\t   \"nationOfCitizenship-country\": \"United States\",\r\n\t   \"graduateStudentInterestPerApp\": \"Student Interest Text\",\r\n     \"gradOpportunityComment\": \"1/4/2019 John: Comment on application\"\r\n   }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT v2/contacts/{contactId}/opportunities - expect 500 empty entryTerm and is a graduate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test('Expect address2State-Test to be the error message', function() {\r",
									"    const responseMessage = json.errors[0].error\r",
									"    pm.expect(responseMessage).to.include(\"given key was not present in the dictionary\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"opportunityId\": \"635801f6-4473-e911-a82b-000d3a365fc2\", \r\n   \"source\": \"Banner\",\r\n   \"preferredCampus\": \"Tampa\",\r\n   \"stage\": \"Applicant\",\r\n   \"status\": \"Active\",\r\n   \"opportunityType\": \"Undergraduate\",\r\n   \"usfId\": \"U26133059\",\r\n   \"unsubmittedApplicationStep\": \"Application Stage\",\r\n   \"application\": {\r\n     \"studentType\": \"Transfer\",\r\n   \t \"entryTerm\":  \"\", \r\n\t   \"applicationNumber\": 3,\r\n     \"sourceId\": \"VZ12345678\",\r\n     \"dateApplied\": \"2019-09-21\",\r\n     \"decisionDate\": \"2019-10-25\",\r\n     \"decisionCode\": \"RR\", \r\n     \"decision\":  \"Canceled Application\",\r\n     \"admitCode\": \"ABC\",\r\n     \"admitDescription\": \"Bla bla bla\",\r\n     \"typeCode\": \"TRN\",\r\n     \"typeDescription\": \"Transfer\",\r\n     \"levelCode\": \"UG\",\r\n     \"level\": \"Undergraduate\",\r\n     \"statusCode\": \"D\",\r\n     \"statusDescription\": \"great\",\r\n     \"campusCode\": \"T\",\r\n     \"campus\": \"Tampa\",\r\n     \"collegeCode\": \"LAS\",\r\n     \"college\": \"Liberal Arts and Sciences\",\r\n     \"majorCode\": \"ENG\",\r\n     \"major\": \"English\",\r\n     \"degreeCode\": \"000000\",\r\n     \"degree\": \"Undeclared\",\r\n     \"programCode\": \"GR-AS-MA-PSY\",\r\n     \"program\": \"program name example\",\r\n     \"concentrationCode\": \"ENG\",\r\n     \"concentration\": \"English\",\r\n     \"residencyCode\": \"Florida Resident\",\r\n     \"residencyDescription\": \"Florida Resident\",\r\n\t   \"disciplined\": false,\r\n\t   \"legalViolation\": false,\r\n\t   \"nationOfCitizenship\": \"US\",\r\n\t   \"nationOfCitizenship-country\": \"United States\",\r\n\t   \"graduateStudentInterestPerApp\": \"Student Interest Text\",\r\n     \"gradOpportunityComment\": \"1/4/2019 John: Comment on application\"\r\n   }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/opportunities/{opportunityId}",
			"item": [
				{
					"name": "PATCH v2/contacts/{contractId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set('putTermsUpdatePayload', JSON.parse(pm.request.body.raw))\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"opportunityId\": \"635801f6-4473-e911-a82b-000d3a365fc2\", \r\n   \"source\": \"Banner\",\r\n   \"preferredCampus\": \"Tampa\",\r\n   \"stage\": \"Applicant\",\r\n   \"status\": \"Active\",\r\n   \"opportunityType\": \"Undergraduate\",\r\n   \"usfId\": \"U26133059\",\r\n   \"unsubmittedApplicationStep\": \"Application Stage\",\r\n   \"application\": {\r\n     \"studentType\": \"Transfer\",\r\n   \t \"entryTerm\":  \"201908\", \r\n\t   \"applicationNumber\": 3,\r\n     \"sourceId\": \"VZ12345678\",\r\n     \"dateApplied\": \"2019-09-21\",\r\n     \"decisionDate\": \"2019-10-25\",\r\n     \"decisionCode\": \"RR\", \r\n     \"decision\":  \"Canceled Application\",\r\n     \"admitCode\": \"ABC\",\r\n     \"admitDescription\": \"Bla bla bla\",\r\n     \"typeCode\": \"TRN\",\r\n     \"typeDescription\": \"Transfer\",\r\n     \"levelCode\": \"UG\",\r\n     \"level\": \"Undergraduate\",\r\n     \"statusCode\": \"D\",\r\n     \"statusDescription\": \"great\",\r\n     \"campusCode\": \"T\",\r\n     \"campus\": \"Tampa\",\r\n     \"collegeCode\": \"LAS\",\r\n     \"college\": \"Liberal Arts and Sciences\",\r\n     \"majorCode\": \"ENG\",\r\n     \"major\": \"English\",\r\n     \"degreeCode\": \"000000\",\r\n     \"degree\": \"Undeclared\",\r\n     \"programCode\": \"GR-AS-MA-PSY\",\r\n     \"program\": \"program name example\",\r\n     \"concentrationCode\": \"ENG\",\r\n     \"concentration\": \"English\",\r\n     \"residencyCode\": \"Florida Resident\",\r\n     \"residencyDescription\": \"Florida Resident\",\r\n\t   \"disciplined\": false,\r\n\t   \"legalViolation\": false,\r\n\t   \"nationOfCitizenship\": \"US\",\r\n\t   \"nationOfCitizenship-country\": \"United States\",\r\n\t   \"graduateStudentInterestPerApp\": \"Student Interest Text\",\r\n     \"gradOpportunityComment\": \"1/4/2019 John: Comment on application\"\r\n   }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/opportunities/{{putContactsOpportunityId}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/opportunities/{opportunityId}/checkLists",
			"item": [
				{
					"name": "PUT v2/contacts/{contactId}/financialAids - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranItemCode = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranInterest)\r",
									"pm.collectionVariables.set(\"putContactOppCheckListItemCode\", ranItemCode)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"itemCode\": \"{{putContactOppCheckListItemCode}}\", \r\n  \t\"item\": \"ABC Stuff\", \r\n  \t\"helpText\": \"You know the stuff\", \r\n  \t\"mandatory\": true,\r\n  \t\"displayToApplicant\": true, \r\n  \t\"comment\": \"Don''t forget this stuff\", \r\n  \t\"received\": \"2019-02-22\", \r\n  \t\"finalCollegeTranscript\": false \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities/{{putContactsOpportunityId}}/checkList",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"checkList"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/opportunities/{opportunityId}/checkList/{itemCode}",
			"item": [
				{
					"name": "DELETE v2/contacts/{contactId}/opportunities/{opportunityId}/checkList/{itemCode} - deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities/{{putContactsOpportunityId}}/checkList/{{putContactOppCheckListItemCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"checkList",
								"{{putContactOppCheckListItemCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE v2/contacts/{contactId}/opportunities/{opportunityId}/checkList/{itemCode} - expect 404 already deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities/{{putContactsOpportunityId}}/checkList/{{putContactOppCheckListItemCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"checkList",
								"{{putContactOppCheckListItemCode}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/opportunities/{opportunityId}/attributes",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/attributes- created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranAttributeCode = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranAttributeCode)\r",
									"pm.collectionVariables.set(\"postContactsOpportunitiesAttributesAttributeCode\", ranAttributeCode)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"attributeCode\": \"{{postContactsOpportunitiesAttributesAttributeCode}}\",\r\n \t\"attributeId\": \"{{getContactAttributesAttributeId}}\",\r\n \t\"attribute\": \"Example text\",\r\n \t\"source\": \"Banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities/{{putContactsOpportunityId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/attributes- updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect entity not altered', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Entity Not Altered\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"attributeCode\": \"{{postContactsOpportunitiesAttributesAttributeCode}}\",\r\n \t\"attributeId\": \"{{getContactAttributesAttributeId}}\",\r\n \t\"attribute\": \"Example text\",\r\n \t\"source\": \"Banner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities/{{putContactsOpportunityId}}/attributes",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"attributes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/opportunities/{opportunityId}/attributes/{attributeCode}",
			"item": [
				{
					"name": "DELETE v2/contacts/{contactId}/opportunities/{opportunityId}/attributes/{attributeCode}- deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities/{{putContactsOpportunityId}}/attributes/{{postContactsOpportunitiesAttributesAttributeCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"attributes",
								"{{postContactsOpportunitiesAttributesAttributeCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE v2/contacts/{contactId}/opportunities/{opportunityId}/attributes/{attributeCode} - expect 404 already deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/opportunities/{{putContactsOpportunityId}}/attributes/{{postContactsOpportunitiesAttributesAttributeCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"attributes",
								"{{postContactsOpportunitiesAttributesAttributeCode}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/hubspotSync",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/attributes- created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranHubspotContactId = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranHubspotContactId)\r",
									"pm.collectionVariables.set(\"postContactsHubspotSyncHubspotContactId\", ranHubspotContactId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"hubspotContactId\": \"{{postContactsHubspotSyncHubspotContactId}}\",\r\n  \"hubspotLastSyncDate\": \"2022-01-01T01:01:01Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/hubspotSync",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"hubspotSync"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/hubspotSync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getHubspotSyncContactId}}/hubspotSync",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getHubspotSyncContactId}}",
								"hubspotSync"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/hubspotSync - expect empty array bad contact id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/5819b6f2-6222-ed11-b83e-000d3a13562d/hubspotSync",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"5819b6f2-6222-ed11-b83e-000d3a13562d",
								"hubspotSync"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/hubspotSync - expect 40X missing client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Authentication denied.\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/5819b6f2-6222-ed11-b83e-000d3a13562d/hubspotSync",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"5819b6f2-6222-ed11-b83e-000d3a13562d",
								"hubspotSync"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /v2/contacts/{contactId}/hubspotSync - expect 40X missing client_id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    const status = pm.response.code\r",
									"    const checkStatus = status === 403 || status === 401 ?  true : false\r",
									"    pm.expect(checkStatus).to.eql(true)\r",
									"});\r",
									"\r",
									"const json = pm.response.json()\r",
									"pm.test(\"Check message contains missing required field/header in the error message\", function() {\r",
									"    const errMsg = json.error\r",
									"    const containsDuplicate = errMsg.includes(\"Invalid Client\")\r",
									"    pm.expect(containsDuplicate).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/5819b6f2-6222-ed11-b83e-000d3a13562d/hubspotSync",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"5819b6f2-6222-ed11-b83e-000d3a13562d",
								"hubspotSync"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/hubspotSync/lastSyncDate",
			"item": [
				{
					"name": "PUT v2/contacts/{contactId}/financialAids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"financialAidYearCode\": \"{{putContactsFinancialAidsFinCode}}\",\r\n\t\"pellQualified\": \"No\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{getOpportunitiesContactId}}/hubspotSync/lastSyncDate",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{getOpportunitiesContactId}}",
								"hubspotSync",
								"lastSyncDate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/studentRecord",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/studentRecord - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\":                 \"Banner\",\r\n  \"usfId\":                  \"U12345679\",\r\n  \"termCode\":               \"{{putTermsTermCode}}\",\r\n  \"orientationStatusCode\":  \"AS\",\r\n  \"orientationStatus\":      \"Reserved\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/studentRecord",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"studentRecord"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/studentRecord - updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\":                 \"Banner\",\r\n  \"usfId\":                  \"U12345679\",\r\n  \"termCode\":               \"{{putTermsTermCode}}\",\r\n  \"orientationStatusCode\":  \"AS\",\r\n  \"orientationStatus\":      \"Reserved\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/studentRecord",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"studentRecord"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/studentRecord/{effTerm}",
			"item": [
				{
					"name": "DELETE v2/contacts/{contactId}/studentRecord/{effTerm} - deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/studentRecord/{{putTermsTermCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"studentRecord",
								"{{putTermsTermCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE v2/contacts/{contactId}/studentRecord/{effTerm} - deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/opportunities/{{putContactsOpportunityId}}/attributes/{{postContactsOpportunitiesAttributesAttributeCode}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"opportunities",
								"{{putContactsOpportunityId}}",
								"attributes",
								"{{postContactsOpportunitiesAttributesAttributeCode}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/courseRegistrations",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/courseRegistrations - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"postContactsCourseRegistrationsCRN\", \"91623\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"Banner\",\r\n  \"termCode\": \"{{putTermsTermCode}}\",\r\n  \"partTermCode\":\"1\",\r\n  \"crn\":\"{{postContactsCourseRegistrationsCRN}}\",\r\n  \"subjectCode\":\"ENG\",\r\n  \"courseNumber\":\"00000\",\r\n  \"statusCode\":\"DD\",\r\n  \"statusDescription\": \"Dropped\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/courseRegistrations",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"courseRegistrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/courseRegistrations - updated successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"Banner\",\r\n  \"termCode\": \"{{putTermsTermCode}}\",\r\n  \"partTermCode\":\"1\",\r\n  \"crn\":\"91623\",\r\n  \"subjectCode\":\"ENG\",\r\n  \"courseNumber\":\"00000\",\r\n  \"statusCode\":\"DD\",\r\n  \"statusDescription\": \"Dropped\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/courseRegistrations",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"courseRegistrations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/courseRegistrations/{term}",
			"item": [
				{
					"name": "DELETE v2/contacts/{contactId}/courseRegistrations/{term} - deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/courseRegistrations/{{putTermsTermCode}}/{{postContactsCourseRegistrationsCRN}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"courseRegistrations",
								"{{putTermsTermCode}}",
								"{{postContactsCourseRegistrationsCRN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE v2/contacts/{contactId}/courseRegistrations/{term} - expect 404 already deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/courseRegistrations/{{putTermsTermCode}}/{{postContactsCourseRegistrationsCRN}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"courseRegistrations",
								"{{putTermsTermCode}}",
								"{{postContactsCourseRegistrationsCRN}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/acadHistoryCreditHours",
			"item": [
				{
					"name": "POST v2/contacts/{contactId}/studentRecord - created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Created Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ranLevlCode = \"IntTest\" + Math.ceil(Math.random() * 999999) + 1\r",
									"// console.log(ranHubspotContactId)\r",
									"pm.collectionVariables.set(\"postContactsAcadCreditHoursLevlCode\", ranLevlCode)\r",
									"pm.collectionVariables.set(\"postContactsAcadCreditHoursGpaType\", \"Type\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"Banner\",\r\n  \"levlCode\": \"{{postContactsAcadCreditHoursLevlCode}}\",\r\n  \"gpaType\": \"Type\",\r\n  \"attemptedHours\": 15,\r\n  \"earnedHours\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/acadHistoryCreditHours",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"acadHistoryCreditHours"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST v2/contacts/{contactId}/studentRecord - created successfully Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"responseCode\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"responseMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"termId\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    let validation = tv4.validate(json, schema);\r",
									"    // console.log(json)\r",
									"    // The next three lines are used to log schema errors to console, will produce an error when the schema is valid because it is a reminder to turn off the loggers\r",
									"    // console.log(tv4.error)\r",
									"    // console.log(tv4.error.schemaPath)\r",
									"    // console.log(tv4.error.dataPath)\r",
									"    pm.expect(validation).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Expect updated successfully', function() {\r",
									"    const responseMessage = json.responseMessage\r",
									"    pm.expect(responseMessage).to.eql(\"Updated Successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"Banner\",\r\n  \"levlCode\": \"{{postContactsAcadCreditHoursLevlCode}}\",\r\n  \"gpaType\": \"Type\",\r\n  \"attemptedHours\": 15,\r\n  \"earnedHours\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/acadHistoryCreditHours",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"acadHistoryCreditHours"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2/contacts/{contactId}/acadHistoryCreditHours/{levlCode}/{gpaType}",
			"item": [
				{
					"name": "DELETE v2/contacts/{contactId}/acadHistoryCreditHours/{levlCode}/{gpaType} - deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/acadHistoryCreditHours/{{postContactsAcadCreditHoursLevlCode}}/{{postContactsAcadCreditHoursGpaType}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"acadHistoryCreditHours",
								"{{postContactsAcadCreditHoursLevlCode}}",
								"{{postContactsAcadCreditHoursGpaType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE v2/contacts/{contactId}/acadHistoryCreditHours/{levlCode}/{gpaType} - expect 404 already deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}{{host}}/{{applicationName}}/v2/contacts/{{putContactsContactId}}/acadHistoryCreditHours/{{postContactsAcadCreditHoursLevlCode}}/{{postContactsAcadCreditHoursGpaType}}",
							"host": [
								"{{protocol}}{{host}}"
							],
							"path": [
								"{{applicationName}}",
								"v2",
								"contacts",
								"{{putContactsContactId}}",
								"acadHistoryCreditHours",
								"{{postContactsAcadCreditHoursLevlCode}}",
								"{{postContactsAcadCreditHoursGpaType}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "path",
			"value": "/api"
		},
		{
			"key": "applicationName",
			"value": "sys-dynamics365"
		},
		{
			"key": "contactId",
			"value": "dfda2eb8-3ae9-ed11-a7c6-0022481fb331"
		},
		{
			"key": "effTerm",
			"value": "202101"
		},
		{
			"key": "termCode",
			"value": ""
		},
		{
			"key": "dynamicsUsername",
			"value": ""
		},
		{
			"key": "dynamicsPassword",
			"value": ""
		},
		{
			"key": "dynamicsClientId",
			"value": ""
		},
		{
			"key": "dynamicsResource",
			"value": ""
		},
		{
			"key": "dynamicsClientSecret",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "getContactFirstName",
			"value": ""
		},
		{
			"key": "getContactLastName",
			"value": ""
		},
		{
			"key": "getContactBirthDate",
			"value": ""
		},
		{
			"key": "getContactEmailAddress1",
			"value": ""
		},
		{
			"key": "getContactEmailAddress2",
			"value": ""
		},
		{
			"key": "getContactMobilePhone",
			"value": ""
		},
		{
			"key": "getContactUsfId",
			"value": ""
		},
		{
			"key": "getContactAttributesContactId",
			"value": ""
		},
		{
			"key": "getContactAttributesAttributeCode",
			"value": ""
		},
		{
			"key": "getOpportunitiesContactId",
			"value": ""
		},
		{
			"key": "getContactOpportunitiesEntryTerm",
			"value": ""
		},
		{
			"key": "getContactOpportunitiesApplNum",
			"value": ""
		},
		{
			"key": "404ContactId",
			"value": ""
		},
		{
			"key": "getHubspotSyncContactId",
			"value": ""
		},
		{
			"key": "getHubspotSyncContactIdEmpty",
			"value": ""
		},
		{
			"key": "putTermsCreatePayload",
			"value": ""
		},
		{
			"key": "putTermsTermCode",
			"value": ""
		},
		{
			"key": "putTermsUpdatePayload",
			"value": ""
		},
		{
			"key": "putAccountsSchoolId",
			"value": ""
		},
		{
			"key": "putAccountsCreatePayload",
			"value": ""
		},
		{
			"key": "putContactsUsfId",
			"value": ""
		},
		{
			"key": "getContactContactId",
			"value": ""
		},
		{
			"key": "putOpportunitiesUsfId",
			"value": ""
		},
		{
			"key": "getMsEvtMgtEventsEventId",
			"value": ""
		},
		{
			"key": "putAccountsAccountId",
			"value": ""
		},
		{
			"key": "putContactsHighSchoolHistorySource",
			"value": ""
		},
		{
			"key": "putContactsInterestsMajor",
			"value": ""
		},
		{
			"key": "putContactsFinancialAidsFinCode",
			"value": ""
		},
		{
			"key": "putContactsOpportunityId",
			"value": ""
		},
		{
			"key": "putContactsTestScoresCompCode",
			"value": ""
		},
		{
			"key": "postContactsAffiliationsKeyGlobalDept",
			"value": ""
		},
		{
			"key": "postContactsAffiliationsRole",
			"value": ""
		},
		{
			"key": "getContactAttributesAttributeId",
			"value": ""
		},
		{
			"key": "postContactsAttributesAttributeCode",
			"value": ""
		},
		{
			"key": "postContactsOpportunitiesAttributesAttributeCode",
			"value": ""
		},
		{
			"key": "postContactsHubspotSyncHubspotContactId",
			"value": ""
		},
		{
			"key": "putContactsContactId",
			"value": ""
		},
		{
			"key": "postContactsAcadCreditHoursLevlCode",
			"value": ""
		},
		{
			"key": "postContactAffiliationsRole",
			"value": ""
		},
		{
			"key": "postContactsAttributeAttributeId",
			"value": ""
		},
		{
			"key": "putContactOppCheckListItemCode",
			"value": ""
		},
		{
			"key": "postContactsCourseRegistrationsCRN",
			"value": ""
		},
		{
			"key": "postContactsAcadCreditHoursGpaType",
			"value": ""
		},
		{
			"key": "getUsfRecruiterTerritoryId",
			"value": ""
		},
		{
			"key": "putAccountsUpdatePayload",
			"value": ""
		},
		{
			"key": "getMsEvtMgtEventsCrmEventid",
			"value": ""
		}
	]
}